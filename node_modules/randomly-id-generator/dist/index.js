"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Generator = void 0;
const types_1 = require("./types");
const node_crypto_1 = require("node:crypto");
class Generator {
    // eslint-disable-next-line @typescript-eslint/explicit-member-accessibility
    constructor(options) {
        this.type = options === null || options === void 0 ? void 0 : options.type;
        this.length = (options === null || options === void 0 ? void 0 : options.length) || 10;
        if (options === null || options === void 0 ? void 0 : options.custom)
            this.custom = options.custom;
    }
    generate() {
        var _a;
        if (typeof this.length !== 'number')
            throw new TypeError('Length must be a number');
        if (this.custom && this.type) {
            throw new Error('You cannot customize a id and put a default type on the generator');
        }
        if (!this.custom) {
            // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition
            switch ((_a = this.type) === null || _a === void 0 ? void 0 : _a.toUpperCase()) {
                case 'DEFAULT':
                    this.custom = types_1.defaultType;
                    break;
                case 'ONLY_NUMBERS':
                    this.custom = types_1.onlyNumbers;
                    break;
                case 'ONLY_LETTERS':
                    this.custom = types_1.onlyLetters;
                    break;
                case undefined:
                    this.custom = types_1.defaultType;
                    break;
                default:
                    throw new TypeError(
                    // eslint-disable-next-line @typescript-eslint/restrict-template-expressions
                    `The supplied type is not a valid type, recived(${this.type})`);
            }
        }
        if (!Array.isArray(this.custom)) {
            if (typeof this.custom === 'string') {
                this.custom = this.custom.split(/ +|/);
                for (const element of this.custom) {
                    if (element.length > 1) {
                        throw new RangeError(`For custom type, you can only use one character that is not separated by an empty space on strings, recived(${element})`);
                    }
                }
            }
            else {
                throw new TypeError(`For custom ids you can only put an array or a string, recived(${typeof this
                    .custom})`);
            }
        }
        else {
            for (const element of this.custom) {
                if (element.length > 1) {
                    throw new RangeError(`For custom ids array elements must be only one length string, recived(${element})`);
                }
            }
        }
        const type = this.custom;
        const id = [];
        for (let number = 0; number < this.length; number++) {
            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call
            const once = type[(0, node_crypto_1.randomInt)(0, type.length)];
            id.push(once);
        }
        return id.join('');
    }
}
exports.Generator = Generator;
